-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    fifo_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    fifo_out_full_n : IN STD_LOGIC;
    fifo_out_write : OUT STD_LOGIC;
    STATUS : OUT STD_LOGIC_VECTOR (31 downto 0);
    STATUS_ap_vld : OUT STD_LOGIC;
    COUNTER : OUT STD_LOGIC_VECTOR (31 downto 0);
    COUNTER_ap_vld : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example_example,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.477000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=206,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal fifo_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_nbwritereq_fu_131_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_215 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_2_reg_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_4_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_6_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_reg_191 : STD_LOGIC_VECTOR (0 downto 0);
    signal latest_data_array_reg_195 : STD_LOGIC_VECTOR (7 downto 0);
    signal latest_data_array_1_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal latest_data_array_2_reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal latest_data_array_3_fu_187_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal latest_data_array_3_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_predicate_op54_write_state5 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal ap_predicate_op64_write_state7 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal ap_predicate_op74_write_state9 : BOOLEAN;
    signal ap_block_state9 : BOOLEAN;
    signal ap_predicate_op84_write_state11 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal fifo_out_din_local : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo_out_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal regslice_both_A_V_data_V_U_apdone_blk : STD_LOGIC;
    signal A_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal A_TVALID_int_regslice : STD_LOGIC;
    signal A_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_A_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal A_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_A_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal A_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_A_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_user_V_U_apdone_blk : STD_LOGIC;
    signal A_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_A_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_last_V_U_apdone_blk : STD_LOGIC;
    signal A_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_A_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_id_V_U_apdone_blk : STD_LOGIC;
    signal A_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_A_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal A_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_A_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component example_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component example_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component example_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_A_V_data_V_U : component example_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TDATA,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_data_V_U_ack_in,
        data_out => A_TDATA_int_regslice,
        vld_out => A_TVALID_int_regslice,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_data_V_U_apdone_blk);

    regslice_both_A_V_keep_V_U : component example_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TKEEP,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_keep_V_U_ack_in,
        data_out => A_TKEEP_int_regslice,
        vld_out => regslice_both_A_V_keep_V_U_vld_out,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_keep_V_U_apdone_blk);

    regslice_both_A_V_strb_V_U : component example_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TSTRB,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_strb_V_U_ack_in,
        data_out => A_TSTRB_int_regslice,
        vld_out => regslice_both_A_V_strb_V_U_vld_out,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_strb_V_U_apdone_blk);

    regslice_both_A_V_user_V_U : component example_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TUSER,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_user_V_U_ack_in,
        data_out => A_TUSER_int_regslice,
        vld_out => regslice_both_A_V_user_V_U_vld_out,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_user_V_U_apdone_blk);

    regslice_both_A_V_last_V_U : component example_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TLAST,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_last_V_U_ack_in,
        data_out => A_TLAST_int_regslice,
        vld_out => regslice_both_A_V_last_V_U_vld_out,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_last_V_U_apdone_blk);

    regslice_both_A_V_id_V_U : component example_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TID,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_id_V_U_ack_in,
        data_out => A_TID_int_regslice,
        vld_out => regslice_both_A_V_id_V_U_vld_out,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_id_V_U_apdone_blk);

    regslice_both_A_V_dest_V_U : component example_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => A_TDEST,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_dest_V_U_ack_in,
        data_out => A_TDEST_int_regslice,
        vld_out => regslice_both_A_V_dest_V_U_vld_out,
        ack_out => A_TREADY_int_regslice,
        apdone_blk => regslice_both_A_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                latest_data_array_1_reg_200 <= A_TDATA_int_regslice(23 downto 16);
                latest_data_array_2_reg_205 <= A_TDATA_int_regslice(15 downto 8);
                latest_data_array_3_reg_210 <= latest_data_array_3_fu_187_p1;
                latest_data_array_reg_195 <= A_TDATA_int_regslice(31 downto 24);
                tmp_last_reg_191 <= A_TLAST_int_regslice;
                tmp_reg_215 <= (0=>fifo_out_full_n, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_2_reg_222 <= (0=>fifo_out_full_n, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_4_reg_229 <= (0=>fifo_out_full_n, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_6_reg_236 <= (0=>fifo_out_full_n, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_nbwritereq_fu_131_p3, tmp_reg_215, ap_CS_fsm_state7, tmp_2_reg_222, ap_CS_fsm_state9, tmp_4_reg_229, ap_CS_fsm_state11, tmp_6_reg_236, tmp_last_reg_191, ap_block_state5, ap_block_state7, ap_block_state9, ap_block_state11, ap_CS_fsm_state12, A_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = A_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and ((tmp_reg_215 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((tmp_reg_215 = ap_const_lv1_0) and (grp_nbwritereq_fu_131_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7) and ((tmp_2_reg_222 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((tmp_2_reg_222 = ap_const_lv1_0) and (grp_nbwritereq_fu_131_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9) and ((tmp_4_reg_229 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((tmp_4_reg_229 = ap_const_lv1_0) and (grp_nbwritereq_fu_131_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11) and ((tmp_6_reg_236 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((tmp_6_reg_236 = ap_const_lv1_0) and (grp_nbwritereq_fu_131_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_last_reg_191 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, A_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_TDATA_blk_n <= A_TVALID_int_regslice;
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_TREADY <= regslice_both_A_V_data_V_U_ack_in;

    A_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state4, A_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = A_TVALID_int_regslice))) then 
            A_TREADY_int_regslice <= ap_const_logic_1;
        else 
            A_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    COUNTER <= ap_const_lv32_0;

    COUNTER_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            COUNTER_ap_vld <= ap_const_logic_1;
        else 
            COUNTER_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    STATUS_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_reg_215, ap_CS_fsm_state7, tmp_2_reg_222, ap_CS_fsm_state9, tmp_4_reg_229, ap_CS_fsm_state11, tmp_6_reg_236, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_block_state5, ap_block_state7, ap_block_state9, ap_block_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, A_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            STATUS <= ap_const_lv32_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            STATUS <= ap_const_lv32_6;
        elsif ((((tmp_6_reg_236 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11)) or ((tmp_4_reg_229 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9)) or ((tmp_2_reg_222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7)) or ((tmp_reg_215 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5)))) then 
            STATUS <= ap_const_lv32_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = A_TVALID_int_regslice)))) then 
            STATUS <= ap_const_lv32_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            STATUS <= ap_const_lv32_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            STATUS <= ap_const_lv32_2;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            STATUS <= ap_const_lv32_1;
        else 
            STATUS <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    STATUS_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_reg_215, ap_CS_fsm_state7, tmp_2_reg_222, ap_CS_fsm_state9, tmp_4_reg_229, ap_CS_fsm_state11, tmp_6_reg_236, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_block_state5, ap_block_state7, ap_block_state9, ap_block_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, A_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = A_TVALID_int_regslice)) or ((tmp_6_reg_236 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11)) or ((tmp_4_reg_229 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9)) or ((tmp_2_reg_222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7)) or ((tmp_reg_215 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            STATUS_ap_vld <= ap_const_logic_1;
        else 
            STATUS_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(ap_block_state11)
    begin
        if ((ap_const_boolean_1 = ap_block_state11)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(A_TVALID_int_regslice)
    begin
        if ((ap_const_logic_0 = A_TVALID_int_regslice)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5)
    begin
        if ((ap_const_boolean_1 = ap_block_state5)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7)
    begin
        if ((ap_const_boolean_1 = ap_block_state7)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9)
    begin
        if ((ap_const_boolean_1 = ap_block_state9)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state11_assign_proc : process(fifo_out_full_n, ap_predicate_op84_write_state11)
    begin
                ap_block_state11 <= ((fifo_out_full_n = ap_const_logic_0) and (ap_predicate_op84_write_state11 = ap_const_boolean_1));
    end process;


    ap_block_state5_assign_proc : process(fifo_out_full_n, ap_predicate_op54_write_state5)
    begin
                ap_block_state5 <= ((fifo_out_full_n = ap_const_logic_0) and (ap_predicate_op54_write_state5 = ap_const_boolean_1));
    end process;


    ap_block_state7_assign_proc : process(fifo_out_full_n, ap_predicate_op64_write_state7)
    begin
                ap_block_state7 <= ((fifo_out_full_n = ap_const_logic_0) and (ap_predicate_op64_write_state7 = ap_const_boolean_1));
    end process;


    ap_block_state9_assign_proc : process(fifo_out_full_n, ap_predicate_op74_write_state9)
    begin
                ap_block_state9 <= ((fifo_out_full_n = ap_const_logic_0) and (ap_predicate_op74_write_state9 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op54_write_state5_assign_proc : process(grp_nbwritereq_fu_131_p3, tmp_reg_215)
    begin
                ap_predicate_op54_write_state5 <= ((tmp_reg_215 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op64_write_state7_assign_proc : process(grp_nbwritereq_fu_131_p3, tmp_2_reg_222)
    begin
                ap_predicate_op64_write_state7 <= ((tmp_2_reg_222 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op74_write_state9_assign_proc : process(grp_nbwritereq_fu_131_p3, tmp_4_reg_229)
    begin
                ap_predicate_op74_write_state9 <= ((tmp_4_reg_229 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op84_write_state11_assign_proc : process(grp_nbwritereq_fu_131_p3, tmp_6_reg_236)
    begin
                ap_predicate_op84_write_state11 <= ((tmp_6_reg_236 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    fifo_out_blk_n_assign_proc : process(fifo_out_full_n, ap_CS_fsm_state5, grp_nbwritereq_fu_131_p3, tmp_reg_215, ap_CS_fsm_state7, tmp_2_reg_222, ap_CS_fsm_state9, tmp_4_reg_229, ap_CS_fsm_state11, tmp_6_reg_236)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and ((tmp_6_reg_236 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state9) and ((tmp_4_reg_229 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state7) and ((tmp_2_reg_222 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_reg_215 = ap_const_lv1_1) or (grp_nbwritereq_fu_131_p3 = ap_const_lv1_1))))) then 
            fifo_out_blk_n <= fifo_out_full_n;
        else 
            fifo_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_out_din <= fifo_out_din_local;

    fifo_out_din_local_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, latest_data_array_reg_195, latest_data_array_1_reg_200, latest_data_array_2_reg_205, latest_data_array_3_reg_210, ap_predicate_op54_write_state5, ap_block_state5, ap_predicate_op64_write_state7, ap_block_state7, ap_predicate_op74_write_state9, ap_block_state9, ap_predicate_op84_write_state11, ap_block_state11)
    begin
        if (((ap_predicate_op84_write_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11))) then 
            fifo_out_din_local <= latest_data_array_reg_195;
        elsif (((ap_predicate_op74_write_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9))) then 
            fifo_out_din_local <= latest_data_array_1_reg_200;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_predicate_op64_write_state7 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state7))) then 
            fifo_out_din_local <= latest_data_array_2_reg_205;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and (ap_predicate_op54_write_state5 = ap_const_boolean_1))) then 
            fifo_out_din_local <= latest_data_array_3_reg_210;
        else 
            fifo_out_din_local <= "XXXXXXXX";
        end if; 
    end process;

    fifo_out_write <= fifo_out_write_local;

    fifo_out_write_local_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_predicate_op54_write_state5, ap_block_state5, ap_predicate_op64_write_state7, ap_block_state7, ap_predicate_op74_write_state9, ap_block_state9, ap_predicate_op84_write_state11, ap_block_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_predicate_op64_write_state7 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5) and (ap_predicate_op54_write_state5 = ap_const_boolean_1)) or ((ap_predicate_op84_write_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_boolean_0 = ap_block_state11)) or ((ap_predicate_op74_write_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9)))) then 
            fifo_out_write_local <= ap_const_logic_1;
        else 
            fifo_out_write_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_nbwritereq_fu_131_p3 <= (0=>fifo_out_full_n, others=>'-');
    latest_data_array_3_fu_187_p1 <= A_TDATA_int_regslice(8 - 1 downto 0);
end behav;
