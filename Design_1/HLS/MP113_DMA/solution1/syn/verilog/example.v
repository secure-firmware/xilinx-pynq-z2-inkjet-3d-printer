// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_example,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.477000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=206,HLS_VERSION=2024_1}" *)

module example (
        ap_clk,
        ap_rst_n,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        fifo_out_din,
        fifo_out_full_n,
        fifo_out_write,
        STATUS,
        STATUS_ap_vld,
        COUNTER,
        COUNTER_ap_vld,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [1:0] A_TUSER;
input  [0:0] A_TLAST;
input  [4:0] A_TID;
input  [5:0] A_TDEST;
output  [7:0] fifo_out_din;
input   fifo_out_full_n;
output   fifo_out_write;
output  [31:0] STATUS;
output   STATUS_ap_vld;
output  [31:0] COUNTER;
output   COUNTER_ap_vld;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg[31:0] STATUS;
reg STATUS_ap_vld;
reg COUNTER_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    A_TDATA_blk_n;
wire    ap_CS_fsm_state4;
reg    fifo_out_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] grp_nbwritereq_fu_131_p3;
reg   [0:0] tmp_reg_215;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_2_reg_222;
wire    ap_CS_fsm_state9;
reg   [0:0] tmp_4_reg_229;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_6_reg_236;
reg   [0:0] tmp_last_reg_191;
reg   [7:0] latest_data_array_reg_195;
reg   [7:0] latest_data_array_1_reg_200;
reg   [7:0] latest_data_array_2_reg_205;
wire   [7:0] latest_data_array_3_fu_187_p1;
reg   [7:0] latest_data_array_3_reg_210;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_predicate_op54_write_state5;
reg    ap_block_state5;
reg    ap_predicate_op64_write_state7;
reg    ap_block_state7;
reg    ap_predicate_op74_write_state9;
reg    ap_block_state9;
reg    ap_predicate_op84_write_state11;
reg    ap_block_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [7:0] fifo_out_din_local;
reg    fifo_out_write_local;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    regslice_both_A_V_data_V_U_apdone_blk;
wire   [31:0] A_TDATA_int_regslice;
wire    A_TVALID_int_regslice;
reg    A_TREADY_int_regslice;
wire    regslice_both_A_V_data_V_U_ack_in;
wire    regslice_both_A_V_keep_V_U_apdone_blk;
wire   [3:0] A_TKEEP_int_regslice;
wire    regslice_both_A_V_keep_V_U_vld_out;
wire    regslice_both_A_V_keep_V_U_ack_in;
wire    regslice_both_A_V_strb_V_U_apdone_blk;
wire   [3:0] A_TSTRB_int_regslice;
wire    regslice_both_A_V_strb_V_U_vld_out;
wire    regslice_both_A_V_strb_V_U_ack_in;
wire    regslice_both_A_V_user_V_U_apdone_blk;
wire   [1:0] A_TUSER_int_regslice;
wire    regslice_both_A_V_user_V_U_vld_out;
wire    regslice_both_A_V_user_V_U_ack_in;
wire    regslice_both_A_V_last_V_U_apdone_blk;
wire   [0:0] A_TLAST_int_regslice;
wire    regslice_both_A_V_last_V_U_vld_out;
wire    regslice_both_A_V_last_V_U_ack_in;
wire    regslice_both_A_V_id_V_U_apdone_blk;
wire   [4:0] A_TID_int_regslice;
wire    regslice_both_A_V_id_V_U_vld_out;
wire    regslice_both_A_V_id_V_U_ack_in;
wire    regslice_both_A_V_dest_V_U_apdone_blk;
wire   [5:0] A_TDEST_int_regslice;
wire    regslice_both_A_V_dest_V_U_vld_out;
wire    regslice_both_A_V_dest_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

example_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

example_regslice_both #(
    .DataWidth( 32 ))
regslice_both_A_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TDATA),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_data_V_U_ack_in),
    .data_out(A_TDATA_int_regslice),
    .vld_out(A_TVALID_int_regslice),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_data_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 4 ))
regslice_both_A_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TKEEP),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_keep_V_U_ack_in),
    .data_out(A_TKEEP_int_regslice),
    .vld_out(regslice_both_A_V_keep_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_keep_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 4 ))
regslice_both_A_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TSTRB),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_strb_V_U_ack_in),
    .data_out(A_TSTRB_int_regslice),
    .vld_out(regslice_both_A_V_strb_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_strb_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 2 ))
regslice_both_A_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TUSER),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_user_V_U_ack_in),
    .data_out(A_TUSER_int_regslice),
    .vld_out(regslice_both_A_V_user_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_user_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 1 ))
regslice_both_A_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TLAST),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_last_V_U_ack_in),
    .data_out(A_TLAST_int_regslice),
    .vld_out(regslice_both_A_V_last_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_last_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 5 ))
regslice_both_A_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TID),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_id_V_U_ack_in),
    .data_out(A_TID_int_regslice),
    .vld_out(regslice_both_A_V_id_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_id_V_U_apdone_blk)
);

example_regslice_both #(
    .DataWidth( 6 ))
regslice_both_A_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(A_TDEST),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_dest_V_U_ack_in),
    .data_out(A_TDEST_int_regslice),
    .vld_out(regslice_both_A_V_dest_V_U_vld_out),
    .ack_out(A_TREADY_int_regslice),
    .apdone_blk(regslice_both_A_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        latest_data_array_1_reg_200 <= {{A_TDATA_int_regslice[23:16]}};
        latest_data_array_2_reg_205 <= {{A_TDATA_int_regslice[15:8]}};
        latest_data_array_3_reg_210 <= latest_data_array_3_fu_187_p1;
        latest_data_array_reg_195 <= {{A_TDATA_int_regslice[31:24]}};
        tmp_last_reg_191 <= A_TLAST_int_regslice;
        tmp_reg_215 <= fifo_out_full_n;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_2_reg_222 <= fifo_out_full_n;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_4_reg_229 <= fifo_out_full_n;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_6_reg_236 <= fifo_out_full_n;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_TDATA_blk_n = A_TVALID_int_regslice;
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == A_TVALID_int_regslice))) begin
        A_TREADY_int_regslice = 1'b1;
    end else begin
        A_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        COUNTER_ap_vld = 1'b1;
    end else begin
        COUNTER_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        STATUS = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        STATUS = 32'd6;
    end else if ((((tmp_6_reg_236 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11)) | ((tmp_4_reg_229 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9)) | ((tmp_2_reg_222 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)) | ((tmp_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)))) begin
        STATUS = 32'd5;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == A_TVALID_int_regslice)))) begin
        STATUS = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        STATUS = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        STATUS = 32'd2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        STATUS = 32'd1;
    end else begin
        STATUS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == A_TVALID_int_regslice)) | ((tmp_6_reg_236 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11)) | ((tmp_4_reg_229 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9)) | ((tmp_2_reg_222 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7)) | ((tmp_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        STATUS_ap_vld = 1'b1;
    end else begin
        STATUS_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state11)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == A_TVALID_int_regslice)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state5)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state7)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state9)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ((tmp_6_reg_236 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1))) | ((1'b1 == ap_CS_fsm_state9) & ((tmp_4_reg_229 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1))) | ((1'b1 == ap_CS_fsm_state7) & ((tmp_2_reg_222 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1))) | ((1'b1 == ap_CS_fsm_state5) & ((tmp_reg_215 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1))))) begin
        fifo_out_blk_n = fifo_out_full_n;
    end else begin
        fifo_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op84_write_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11))) begin
        fifo_out_din_local = latest_data_array_reg_195;
    end else if (((ap_predicate_op74_write_state9 == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9))) begin
        fifo_out_din_local = latest_data_array_1_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state7) & (ap_predicate_op64_write_state7 == 1'b1) & (1'b0 == ap_block_state7))) begin
        fifo_out_din_local = latest_data_array_2_reg_205;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & (ap_predicate_op54_write_state5 == 1'b1))) begin
        fifo_out_din_local = latest_data_array_3_reg_210;
    end else begin
        fifo_out_din_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (ap_predicate_op64_write_state7 == 1'b1) & (1'b0 == ap_block_state7)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & (ap_predicate_op54_write_state5 == 1'b1)) | ((ap_predicate_op84_write_state11 == 1'b1) & (1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11)) | ((ap_predicate_op74_write_state9 == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9)))) begin
        fifo_out_write_local = 1'b1;
    end else begin
        fifo_out_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == A_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5) & ((tmp_reg_215 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((tmp_reg_215 == 1'd0) & (grp_nbwritereq_fu_131_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7) & ((tmp_2_reg_222 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((tmp_2_reg_222 == 1'd0) & (grp_nbwritereq_fu_131_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9) & ((tmp_4_reg_229 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((tmp_4_reg_229 == 1'd0) & (grp_nbwritereq_fu_131_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11) & ((tmp_6_reg_236 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((tmp_6_reg_236 == 1'd0) & (grp_nbwritereq_fu_131_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_block_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (tmp_last_reg_191 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_TREADY = regslice_both_A_V_data_V_U_ack_in;

assign COUNTER = 32'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11 = ((fifo_out_full_n == 1'b0) & (ap_predicate_op84_write_state11 == 1'b1));
end

always @ (*) begin
    ap_block_state5 = ((fifo_out_full_n == 1'b0) & (ap_predicate_op54_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state7 = ((fifo_out_full_n == 1'b0) & (ap_predicate_op64_write_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state9 = ((fifo_out_full_n == 1'b0) & (ap_predicate_op74_write_state9 == 1'b1));
end

always @ (*) begin
    ap_predicate_op54_write_state5 = ((tmp_reg_215 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op64_write_state7 = ((tmp_2_reg_222 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op74_write_state9 = ((tmp_4_reg_229 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op84_write_state11 = ((tmp_6_reg_236 == 1'd1) | (grp_nbwritereq_fu_131_p3 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign fifo_out_din = fifo_out_din_local;

assign fifo_out_write = fifo_out_write_local;

assign grp_nbwritereq_fu_131_p3 = fifo_out_full_n;

assign latest_data_array_3_fu_187_p1 = A_TDATA_int_regslice[7:0];

endmodule //example
